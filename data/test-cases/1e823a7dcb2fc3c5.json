{"uid":"1e823a7dcb2fc3c5","name":"The products sorting test","fullName":"tests.test_products.TestProducts#test_sorting","historyId":"df47fbcb38c54486119dc9ea8c3accb8","time":{"start":1718133730046,"stop":1718133730046,"duration":0},"description":"A test for sorting products by {sort_by} and {sort_name}","descriptionHtml":"<p>A test for sorting products by {sort_by} and {sort_name}</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: Error : Platform and Browser not valid.","statusTrace":"request = <SubRequest 'app' for <Function test_sorting[name-asc]>>\n\n    @pytest.fixture(scope='function', autouse=True)\n    def app(request):\n        appium_driver = None\n        mode_run = request.config.getoption(\"--mode_run\")\n        if mode_run == \"local_em\":\n            capabilities = {\n                'platformName': 'android',\n                'deviceName': '@Pixel_3a_API_34',\n                'appium:automationName': 'UIAutomator2',\n                'appium:app': app_path\n            }\n            options = AppiumOptions().load_capabilities(capabilities)\n            appium_driver = webdriver.Remote(\"http://127.0.0.1:4723/wd/hub\", options=options)\n        elif mode_run == \"remote_bs\":\n            capabilities = {\n                'platformName': 'android',\n                'platformVersion': '9.0',\n                'deviceName': 'Google Pixel 3a',\n                'app': uploaded_app_url(),\n    \n                'bstack:options': {\n                    \"projectName\": \"My Demo Project\",\n                    \"buildName\": \"browserstack-build-3\",\n                    f\"sessionName\": f\"{request.node.name}\",\n    \n                    # Set access credentials\n                    \"userName\": config['BROWSERSTACK_USERNAME'],\n                    \"accessKey\": config['BROWSERSTACK_ACCESS_KEY']\n                }\n    \n            }\n            options = UiAutomator2Options().load_capabilities(capabilities)\n>           appium_driver = webdriver.Remote(\"http://hub.browserstack.com/wd/hub\", options=options)\n\nconftest.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/midterm-project-esx4s7nW-py3.12/lib/python3.12/site-packages/appium/webdriver/webdriver.py:229: in __init__\n    super().__init__(\n../../../.cache/pypoetry/virtualenvs/midterm-project-esx4s7nW-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:209: in __init__\n    self.start_session(capabilities)\n../../../.cache/pypoetry/virtualenvs/midterm-project-esx4s7nW-py3.12/lib/python3.12/site-packages/appium/webdriver/webdriver.py:321: in start_session\n    response = self.execute(RemoteCommand.NEW_SESSION, w3c_caps)\n../../../.cache/pypoetry/virtualenvs/midterm-project-esx4s7nW-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fa510641f40>\nresponse = {'sessionId': '', 'status': 13, 'value': {'error': 'Error : Platform and Browser not valid.', 'message': 'Error : Platform and Browser not valid.'}}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: Error : Platform and Browser not valid.\n\n../../../.cache/pypoetry/virtualenvs/midterm-project-esx4s7nW-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1718133579155,"stop":1718133579182,"duration":27},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"app","time":{"start":1718133730047,"stop":1718133731504,"duration":1457},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: Error : Platform and Browser not valid.\n\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/midterm-project-esx4s7nW-py3.12/lib/python3.12/site-packages/pluggy/_callers.py\", line 77, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/midterm-project-esx4s7nW-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py\", line 1123, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/midterm-project-esx4s7nW-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py\", line 895, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"/home/runner/work/appium_project/appium_project/conftest.py\", line 59, in app\n    appium_driver = webdriver.Remote(\"http://hub.browserstack.com/wd/hub\", options=options)\n                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/midterm-project-esx4s7nW-py3.12/lib/python3.12/site-packages/appium/webdriver/webdriver.py\", line 229, in __init__\n    super().__init__(\n  File \"/home/runner/.cache/pypoetry/virtualenvs/midterm-project-esx4s7nW-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 209, in __init__\n    self.start_session(capabilities)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/midterm-project-esx4s7nW-py3.12/lib/python3.12/site-packages/appium/webdriver/webdriver.py\", line 321, in start_session\n    response = self.execute(RemoteCommand.NEW_SESSION, w3c_caps)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/midterm-project-esx4s7nW-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 348, in execute\n    self.error_handler.check_response(response)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/midterm-project-esx4s7nW-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"afterStages":[],"labels":[{"name":"severity","value":"minor"},{"name":"epic","value":"Products"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_products"},{"name":"subSuite","value":"TestProducts"},{"name":"host","value":"fv-az1198-814"},{"name":"thread","value":"1875-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_products"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"sort_by","value":"'name'"},{"name":"sort_name","value":"'asc'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"minor","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"1e823a7dcb2fc3c5.json","parameterValues":["'name'","'asc'"]}